# 1 "test_libdb.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 317 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "test_libdb.c" 2






# 1 "./libdb.h" 1


# 1 "/usr/bin/../lib/clang/3.8.0/include/stdint.h" 1 3
# 63 "/usr/bin/../lib/clang/3.8.0/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 25 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 346 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 347 "/usr/include/features.h" 2 3 4
# 368 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 410 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 411 "/usr/include/sys/cdefs.h" 2 3 4
# 369 "/usr/include/features.h" 2 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4








typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 64 "/usr/bin/../lib/clang/3.8.0/include/stdint.h" 2 3
# 4 "./libdb.h" 2

typedef struct {
  const char *functionNames;
  uintptr_t *functionAddresses;
  const char *fileNames;
  uint64_t functionCount;
  uint64_t fileCount;
} libdb_Symbol_Table;

typedef enum {
  libdb_Program_State_INVALID,
  libdb_Program_State_UNSTARTED,
  libdb_Program_State_RUNNING,
  libdb_Program_State_STOPPED,
  libdb_Program_State_EXITED,
} libdb_Program_State;

typedef enum {
  libdb_Stop_Reason_NONE,
  libdb_Stop_Reason_BREAKPOINT_HIT,
} libdb_Stop_Reason;

typedef struct {
  libdb_Symbol_Table symbol_table;
  int32_t pid;

  libdb_Program_State state;
  libdb_Stop_Reason stop_reason;
  uint64_t rip;
  int64_t breakpoint_id;
} libdb_Program;

int32_t libdb_program_open(const char *executable_path, libdb_Program *program);
int32_t libdb_program_update_state(libdb_Program *program);

int libdb_execution_continue(libdb_Program *program);
void libdb_exectuion_step_over(libdb_Program *program);
void libdb_execution_step_into(libdb_Program *program);
void libdb_exeuction_step_out(libdb_Program *program);

int64_t libdb_breakpoint_create_at_symbol(const char *symbol_name, libdb_Program *program);
int64_t libdb_breakpoint_create_at_location(const char *filename, int64_t line_number, libdb_Program *program);
void libdb_breakpoint_destroy(int64_t breakpoint_id);







# 1 "/usr/include/errno.h" 1 3 4
# 35 "/usr/include/errno.h" 3 4
# 1 "/usr/include/bits/errno.h" 1 3 4
# 24 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/bits/errno.h" 2 3 4
# 50 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 54 "./libdb.h" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 22 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 220 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 122 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 221 "/usr/include/unistd.h" 2 3 4


typedef __ssize_t ssize_t;






# 1 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 1 3 4
# 62 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 230 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 258 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;




typedef __pid_t pid_t;
# 277 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ ));
# 356 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 420 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ )) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ ));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ ));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ )) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ )) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ )) ;
# 528 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ )) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ ));
# 546 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
# 601 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ )) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));






# 1 "/usr/include/bits/confname.h" 1 3 4
# 24 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ ));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ ));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ ));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ ));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ ));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ ));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ ));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ ));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ ));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ ));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ ));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ ));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ ));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ ));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ ));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ ));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ )) ;
# 703 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ )) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ )) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ )) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ )) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ )) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ )) ;
# 759 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ ));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ ));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ ));





extern int ttyslot (void) __attribute__ ((__nothrow__ ));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ ));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ ));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ ));
# 875 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ )) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ ));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ ));



extern char *getusershell (void) __attribute__ ((__nothrow__ ));
extern void endusershell (void) __attribute__ ((__nothrow__ ));
extern void setusershell (void) __attribute__ ((__nothrow__ ));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ )) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 972 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ ));





extern int getpagesize (void) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ ));
# 996 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ )) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ )) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ ));
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ ));
# 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 55 "./libdb.h" 2
# 1 "/usr/include/sys/types.h" 1 3 4
# 33 "/usr/include/sys/types.h" 3 4
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;
# 70 "/usr/include/sys/types.h" 3 4
typedef __mode_t mode_t;




typedef __nlink_t nlink_t;
# 104 "/usr/include/sys/types.h" 3 4
typedef __id_t id_t;
# 115 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 59 "/usr/include/time.h" 3 4
typedef __clock_t clock_t;
# 75 "/usr/include/time.h" 3 4
typedef __time_t time_t;
# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/sys/types.h" 2 3 4
# 146 "/usr/include/sys/types.h" 3 4
# 1 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 1 3 4
# 147 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 200 "/usr/include/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 216 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4






# 1 "/usr/include/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/bits/byteswap.h" 2 3 4
# 61 "/usr/include/endian.h" 2 3 4
# 217 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 22 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/select.h" 2 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 22 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;






# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 106 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 220 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 26 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ )) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ )) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ )) __attribute__ ((__const__));
# 223 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4
# 56 "./libdb.h" 2
# 1 "/usr/include/sys/ptrace.h" 1 3 4
# 28 "/usr/include/sys/ptrace.h" 3 4
enum __ptrace_request
{



  PTRACE_TRACEME = 0,



  PTRACE_PEEKTEXT = 1,



  PTRACE_PEEKDATA = 2,



  PTRACE_PEEKUSER = 3,



  PTRACE_POKETEXT = 4,



  PTRACE_POKEDATA = 5,



  PTRACE_POKEUSER = 6,



  PTRACE_CONT = 7,



  PTRACE_KILL = 8,




  PTRACE_SINGLESTEP = 9,




   PTRACE_GETREGS = 12,




   PTRACE_SETREGS = 13,




   PTRACE_GETFPREGS = 14,




   PTRACE_SETFPREGS = 15,



  PTRACE_ATTACH = 16,



  PTRACE_DETACH = 17,




   PTRACE_GETFPXREGS = 18,




   PTRACE_SETFPXREGS = 19,



  PTRACE_SYSCALL = 24,



  PTRACE_SETOPTIONS = 0x4200,



  PTRACE_GETEVENTMSG = 0x4201,



  PTRACE_GETSIGINFO = 0x4202,



  PTRACE_SETSIGINFO = 0x4203,



  PTRACE_GETREGSET = 0x4204,



  PTRACE_SETREGSET = 0x4205,




  PTRACE_SEIZE = 0x4206,



  PTRACE_INTERRUPT = 0x4207,



  PTRACE_LISTEN = 0x4208,


  PTRACE_PEEKSIGINFO = 0x4209,


  PTRACE_GETSIGMASK = 0x420a,


  PTRACE_SETSIGMASK = 0x420b,


  PTRACE_SECCOMP_GET_FILTER = 0x420c

};



enum __ptrace_flags
{
  PTRACE_SEIZE_DEVEL = 0x80000000
};


enum __ptrace_setoptions
{
  PTRACE_O_TRACESYSGOOD = 0x00000001,
  PTRACE_O_TRACEFORK = 0x00000002,
  PTRACE_O_TRACEVFORK = 0x00000004,
  PTRACE_O_TRACECLONE = 0x00000008,
  PTRACE_O_TRACEEXEC = 0x00000010,
  PTRACE_O_TRACEVFORKDONE = 0x00000020,
  PTRACE_O_TRACEEXIT = 0x00000040,
  PTRACE_O_TRACESECCOMP = 0x00000080,
  PTRACE_O_EXITKILL = 0x00100000,
  PTRACE_O_SUSPEND_SECCOMP = 0x00200000,
  PTRACE_O_MASK = 0x003000ff
};


enum __ptrace_eventcodes
{
  PTRACE_EVENT_FORK = 1,
  PTRACE_EVENT_VFORK = 2,
  PTRACE_EVENT_CLONE = 3,
  PTRACE_EVENT_EXEC = 4,
  PTRACE_EVENT_VFORK_DONE = 5,
  PTRACE_EVENT_EXIT = 6,
  PTRACE_EVENT_SECCOMP = 7
};


struct __ptrace_peeksiginfo_args
{
  __uint64_t off;
  __uint32_t flags;
  __int32_t nr;
};

enum __ptrace_peeksiginfo_flags
{

  PTRACE_PEEKSIGINFO_SHARED = (1 << 0)
};
# 223 "/usr/include/sys/ptrace.h" 3 4
extern long int ptrace (enum __ptrace_request __request, ...) __attribute__ ((__nothrow__ ));
# 57 "./libdb.h" 2
# 1 "/usr/include/sys/wait.h" 1 3 4
# 29 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 32 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/sigset.h" 1 3 4
# 102 "/usr/include/bits/sigset.h" 3 4
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 33 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/signum.h" 1 3 4
# 58 "/usr/include/signal.h" 2 3 4
# 75 "/usr/include/signal.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 76 "/usr/include/signal.h" 2 3 4




# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 24 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 58 "/usr/include/bits/siginfo.h" 3 4
typedef __clock_t __sigchld_clock_t;



typedef struct
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
     short int si_addr_lsb;
     struct
       {
  void *_lower;
  void *_upper;
       } si_addr_bnd;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;


 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;
# 160 "/usr/include/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};
# 264 "/usr/include/bits/siginfo.h" 3 4
enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 320 "/usr/include/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 81 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ ));
# 102 "/usr/include/signal.h" 3 4
extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ ));
# 127 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ ));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ ));




extern int raise (int __sig) __attribute__ ((__nothrow__ ));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ ));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ ));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 187 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));
# 207 "/usr/include/signal.h" 3 4
typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 243 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 24 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 244 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ ));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ ));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));






extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ ));
# 301 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];




# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 29 "/usr/include/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 121 "/usr/include/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 307 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ ));







# 1 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ ));


# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 25 "/usr/include/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 49 "/usr/include/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 324 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 22 "/usr/include/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 23 "/usr/include/sys/ucontext.h" 2 3 4








__extension__ typedef long long int greg_t;





typedef greg_t gregset_t[23];
# 92 "/usr/include/sys/ucontext.h" 3 4
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 327 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));



extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__ ));
# 362 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 30 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ ));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ ));
# 363 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ ));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ ));
# 30 "/usr/include/sys/wait.h" 2 3 4





# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 36 "/usr/include/sys/wait.h" 2 3 4
# 60 "/usr/include/sys/wait.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 77 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 66 "/usr/include/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 78 "/usr/include/sys/wait.h" 2 3 4
# 99 "/usr/include/sys/wait.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 113 "/usr/include/sys/wait.h" 3 4
extern __pid_t wait (__WAIT_STATUS __stat_loc);
# 136 "/usr/include/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 146 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 24 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 2 3 4
# 147 "/usr/include/sys/wait.h" 2 3 4
# 159 "/usr/include/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);





struct rusage;






extern __pid_t wait3 (__WAIT_STATUS __stat_loc, int __options,
        struct rusage * __usage) __attribute__ ((__nothrow__));




extern __pid_t wait4 (__pid_t __pid, __WAIT_STATUS __stat_loc, int __options,
        struct rusage *__usage) __attribute__ ((__nothrow__));
# 58 "./libdb.h" 2
# 1 "/usr/include/sys/user.h" 1 3 4
# 27 "/usr/include/sys/user.h" 3 4
struct user_fpregs_struct
{
  unsigned short int cwd;
  unsigned short int swd;
  unsigned short int ftw;
  unsigned short int fop;
  __extension__ unsigned long long int rip;
  __extension__ unsigned long long int rdp;
  unsigned int mxcsr;
  unsigned int mxcr_mask;
  unsigned int st_space[32];
  unsigned int xmm_space[64];
  unsigned int padding[24];
};

struct user_regs_struct
{
  __extension__ unsigned long long int r15;
  __extension__ unsigned long long int r14;
  __extension__ unsigned long long int r13;
  __extension__ unsigned long long int r12;
  __extension__ unsigned long long int rbp;
  __extension__ unsigned long long int rbx;
  __extension__ unsigned long long int r11;
  __extension__ unsigned long long int r10;
  __extension__ unsigned long long int r9;
  __extension__ unsigned long long int r8;
  __extension__ unsigned long long int rax;
  __extension__ unsigned long long int rcx;
  __extension__ unsigned long long int rdx;
  __extension__ unsigned long long int rsi;
  __extension__ unsigned long long int rdi;
  __extension__ unsigned long long int orig_rax;
  __extension__ unsigned long long int rip;
  __extension__ unsigned long long int cs;
  __extension__ unsigned long long int eflags;
  __extension__ unsigned long long int rsp;
  __extension__ unsigned long long int ss;
  __extension__ unsigned long long int fs_base;
  __extension__ unsigned long long int gs_base;
  __extension__ unsigned long long int ds;
  __extension__ unsigned long long int es;
  __extension__ unsigned long long int fs;
  __extension__ unsigned long long int gs;
};

struct user
{
  struct user_regs_struct regs;
  int u_fpvalid;
  struct user_fpregs_struct i387;
  __extension__ unsigned long long int u_tsize;
  __extension__ unsigned long long int u_dsize;
  __extension__ unsigned long long int u_ssize;
  __extension__ unsigned long long int start_code;
  __extension__ unsigned long long int start_stack;
  __extension__ long long int signal;
  int reserved;
  __extension__ union
    {
      struct user_regs_struct* u_ar0;
      __extension__ unsigned long long int __u_ar0_word;
    };
  __extension__ union
    {
      struct user_fpregs_struct* u_fpstate;
      __extension__ unsigned long long int __u_fpstate_word;
    };
  __extension__ unsigned long long int magic;
  char u_comm [32];
  __extension__ unsigned long long int u_debugreg [8];
};
# 59 "./libdb.h" 2

# 1 "/usr/include/malloc.h" 1 3 4
# 23 "/usr/include/malloc.h" 3 4
# 1 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 1 3 4
# 51 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 90 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 3 4
typedef int wchar_t;
# 118 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/3.8.0/include/__stddef_max_align_t.h" 1 3 4
# 35 "/usr/bin/../lib/clang/3.8.0/include/__stddef_max_align_t.h" 3 4
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 119 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 2 3 4
# 24 "/usr/include/malloc.h" 2 3 4
# 1 "/usr/include/stdio.h" 1 3 4
# 33 "/usr/include/stdio.h" 3 4
# 1 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;
# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/bin/../lib/clang/3.8.0/include/stdarg.h" 1 3 4
# 30 "/usr/bin/../lib/clang/3.8.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 50 "/usr/bin/../lib/clang/3.8.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 385 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ ));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ ));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ ));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ ));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ ));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ ));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 110 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ ));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ ));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ ));
# 195 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) ;
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ )) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ )) ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;
# 237 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 272 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ )) ;
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ )) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ )) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ ));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ ));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ ));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ ));
# 356 "/usr/include/stdio.h" 3 4
extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
# 425 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ ));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ ));
# 471 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ ))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 531 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 573 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);
# 622 "/usr/include/stdio.h" 3 4
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;
# 689 "/usr/include/stdio.h" 3 4
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);
# 749 "/usr/include/stdio.h" 3 4
extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 798 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 826 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ ));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ )) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ )) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ ));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ )) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ )) ;
# 846 "/usr/include/stdio.h" 3 4
extern void perror (const char *__s);







# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ )) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ )) ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ ));
# 912 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ ));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ )) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ ));
# 25 "/usr/include/malloc.h" 2 3 4
# 38 "/usr/include/malloc.h" 3 4
extern void *malloc (size_t __size) __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;


extern void *calloc (size_t __nmemb, size_t __size)
__attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
__attribute__ ((__nothrow__ )) __attribute__ ((__warn_unused_result__));


extern void free (void *__ptr) __attribute__ ((__nothrow__ ));


extern void cfree (void *__ptr) __attribute__ ((__nothrow__ ));


extern void *memalign (size_t __alignment, size_t __size)
__attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;


extern void *valloc (size_t __size) __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;



extern void *pvalloc (size_t __size) __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;



extern void *(*__morecore) (ptrdiff_t __size);


extern void *__default_morecore (ptrdiff_t __size)
__attribute__ ((__nothrow__ )) __attribute__ ((__malloc__));



struct mallinfo
{
  int arena;
  int ordblks;
  int smblks;
  int hblks;
  int hblkhd;
  int usmblks;
  int fsmblks;
  int uordblks;
  int fordblks;
  int keepcost;
};


extern struct mallinfo mallinfo (void) __attribute__ ((__nothrow__ ));
# 121 "/usr/include/malloc.h" 3 4
extern int mallopt (int __param, int __val) __attribute__ ((__nothrow__ ));



extern int malloc_trim (size_t __pad) __attribute__ ((__nothrow__ ));



extern size_t malloc_usable_size (void *__ptr) __attribute__ ((__nothrow__ ));


extern void malloc_stats (void) __attribute__ ((__nothrow__ ));


extern int malloc_info (int __options, FILE *__fp) __attribute__ ((__nothrow__ ));


extern void *malloc_get_state (void) __attribute__ ((__nothrow__ ));



extern int malloc_set_state (void *__ptr) __attribute__ ((__nothrow__ ));




extern void (*volatile __malloc_initialize_hook) (void)
__attribute__ ((__deprecated__));

extern void (*volatile __free_hook) (void *__ptr,
                                                   const void *)
__attribute__ ((__deprecated__));
extern void *(*volatile __malloc_hook)(size_t __size,
                                                     const void *)
__attribute__ ((__deprecated__));
extern void *(*volatile __realloc_hook)(void *__ptr,
                                                      size_t __size,
                                                      const void *)
__attribute__ ((__deprecated__));
extern void *(*volatile __memalign_hook)(size_t __alignment,
                                                       size_t __size,
                                                       const void *)
__attribute__ ((__deprecated__));
extern void (*volatile __after_morecore_hook) (void);


extern void __malloc_check_init (void) __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));
# 61 "./libdb.h" 2

# 1 "/usr/include/string.h" 1 3 4
# 32 "/usr/include/string.h" 3 4
# 1 "/usr/bin/../lib/clang/3.8.0/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 125 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));







# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 160 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 3)));
# 394 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ ));
# 422 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));
# 440 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ ));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));
# 529 "/usr/include/string.h" 3 4
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 552 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ ));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
# 63 "./libdb.h" 2
# 95 "./libdb.h"
# 1 "/usr/include/assert.h" 1 3 4
# 67 "/usr/include/assert.h" 3 4
extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));
# 96 "./libdb.h" 2
# 110 "./libdb.h"
typedef struct {
  uint64_t instruction_address;
  uint64_t replaced_memory;
} libdb_Breakpoint;

typedef struct {
  uint64_t breakpoint_addresses[16];
} libdb_Internal;

static libdb_Breakpoint _breakpoints[16];
static uint32_t _breakpoint_count = 0;



# 1 "./elf64.h" 1
# 40 "./elf64.h"
typedef struct {
  uint32_t magicNumber;
  uint8_t bitType;
  uint8_t dataEncoding;
  uint8_t elfVersion;
  uint8_t osABI;
  uint8_t padding[8];

  uint16_t objectFileType;
  uint16_t instructionSet;
  uint32_t elfVersion11;

  uint64_t programEntryOffset;
  uint64_t programHeaderOffset;
  uint64_t sectionHeaderOffset;

  uint32_t flags;
  uint16_t elfHeaderSize;
  uint16_t programHeaderEntrySize;
  uint16_t programHeaderEntryCount;
  uint16_t sectionHeaderEntrySize;
  uint16_t sectionHeaderEntryCount;
  uint16_t sectionStringTableSectionIndex;
} ELF64Header;

typedef struct {
  uint32_t nameOffset;
  uint32_t sectionType;
  uint64_t flags;
  uint64_t virtualAddress;
  uint64_t fileOffsetOfSectionData;
  uint64_t sectionSize;

  uint32_t sectionLink;
  uint32_t sectionInfo;
  uint64_t addressAlignmentBoundary;
  uint64_t sectionEntrySize;
} ELFSectionHeader;

typedef struct {
  uint32_t nameOffset;
  uint8_t type : 4;
  uint8_t binding : 4;
  uint8_t nullByte;
  uint16_t sectionTableIndex;
  uint64_t symbolValue;
  uint64_t size;
} ELFSymbol;

typedef enum {
  ELF_SECTION_TEXT,
  ELF_SECTION_BSS,
  ELF_SECTION_DATA,
} ELFSection;
# 283 "./elf64.h"
  static const uint32_t DW_AT_sibling = 0x01; static const uint32_t DW_AT_location = 0x02; static const uint32_t DW_AT_name = 0x03; static const uint32_t DW_AT_ordering = 0x09; static const uint32_t DW_AT_byte_size = 0x0b; static const uint32_t DW_AT_bit_offset = 0x0c; static const uint32_t DW_AT_bit_size = 0x0d; static const uint32_t DW_AT_stmt_list = 0x10; static const uint32_t DW_AT_low_pc = 0x11; static const uint32_t DW_AT_high_pc = 0x12; static const uint32_t DW_AT_language = 0x13; static const uint32_t DW_AT_discr = 0x15; static const uint32_t DW_AT_discr_value = 0x16; static const uint32_t DW_AT_visibility = 0x17; static const uint32_t DW_AT_import = 0x18; static const uint32_t DW_AT_string_length = 0x19; static const uint32_t DW_AT_common_reference = 0x1a; static const uint32_t DW_AT_comp_dir = 0x1b; static const uint32_t DW_AT_const_value = 0x1c; static const uint32_t DW_AT_containing_type = 0x1d; static const uint32_t DW_AT_default_value = 0x1e; static const uint32_t DW_AT_inline = 0x20; static const uint32_t DW_AT_is_optional = 0x21; static const uint32_t DW_AT_lower_bound = 0x22; static const uint32_t DW_AT_producer = 0x25; static const uint32_t DW_AT_prototyped = 0x27; static const uint32_t DW_AT_return_addr = 0x2a; static const uint32_t DW_AT_start_scope = 0x2c; static const uint32_t DW_AT_bit_stride = 0x2e; static const uint32_t DW_AT_upper_bound = 0x2f; static const uint32_t DW_AT_abstract_origin = 0x31; static const uint32_t DW_AT_accessibility = 0x32; static const uint32_t DW_AT_address_class = 0x33; static const uint32_t DW_AT_artificial = 0x34; static const uint32_t DW_AT_base_types = 0x35; static const uint32_t DW_AT_calling_convention = 0x36; static const uint32_t DW_AT_count = 0x37; static const uint32_t DW_AT_data_member_location = 0x38; static const uint32_t DW_AT_decl_column = 0x39; static const uint32_t DW_AT_decl_file = 0x3a; static const uint32_t DW_AT_decl_line = 0x3b; static const uint32_t DW_AT_declaration = 0x3c; static const uint32_t DW_AT_discr_list = 0x3d; static const uint32_t DW_AT_encoding = 0x3e; static const uint32_t DW_AT_external = 0x3f; static const uint32_t DW_AT_frame_base = 0x40; static const uint32_t DW_AT_friend = 0x41; static const uint32_t DW_AT_identifier_case = 0x42; static const uint32_t DW_AT_macro_info = 0x43; static const uint32_t DW_AT_namelist_item = 0x44; static const uint32_t DW_AT_priority = 0x45; static const uint32_t DW_AT_segment = 0x46; static const uint32_t DW_AT_specification = 0x47; static const uint32_t DW_AT_static_link = 0x48; static const uint32_t DW_AT_type = 0x49; static const uint32_t DW_AT_use_location = 0x4a; static const uint32_t DW_AT_variable_parameter = 0x4b; static const uint32_t DW_AT_virtuality = 0x4c; static const uint32_t DW_AT_vtable_elem_location = 0x4d; static const uint32_t DW_AT_allocated = 0x4e; static const uint32_t DW_AT_associated = 0x4f; static const uint32_t DW_AT_data_location = 0x50; static const uint32_t DW_AT_byte_stride = 0x51; static const uint32_t DW_AT_entry_pc = 0x52; static const uint32_t DW_AT_use_UTF8 = 0x53; static const uint32_t DW_AT_extension = 0x54; static const uint32_t DW_AT_ranges = 0x55; static const uint32_t DW_AT_trampoline = 0x56; static const uint32_t DW_AT_call_column = 0x57; static const uint32_t DW_AT_call_file = 0x58; static const uint32_t DW_AT_call_line = 0x59; static const uint32_t DW_AT_description = 0x5a; static const uint32_t DW_AT_binary_scale = 0x5b; static const uint32_t DW_AT_decimal_scale = 0x5c; static const uint32_t DW_AT_small = 0x5d; static const uint32_t DW_AT_decimal_sign = 0x5e; static const uint32_t DW_AT_digit_count = 0x5f; static const uint32_t DW_AT_picture_string = 0x60; static const uint32_t DW_AT_mutable = 0x61; static const uint32_t DW_AT_threads_scaled = 0x62; static const uint32_t DW_AT_explicit = 0x63; static const uint32_t DW_AT_object_pointer = 0x64; static const uint32_t DW_AT_endianity = 0x65; static const uint32_t DW_AT_elemental = 0x66; static const uint32_t DW_AT_pure = 0x67; static const uint32_t DW_AT_recursive = 0x68; static const uint32_t DW_AT_signature = 0x69; static const uint32_t DW_AT_main_subprogram = 0x6a; static const uint32_t DW_AT_data_bit_offset = 0x6b; static const uint32_t DW_AT_const_expr = 0x6c; static const uint32_t DW_AT_enum_class = 0x6d; static const uint32_t DW_AT_linkage_name = 0x6e; static const uint32_t DW_AT_lo_user = 0x2000; static const uint32_t DW_AT_hi_user = 0x3fff;
  static const uint32_t DW_TAG_array_type = 0x01; static const uint32_t DW_TAG_class_type = 0x02; static const uint32_t DW_TAG_entry_point = 0x03; static const uint32_t DW_TAG_enumeration_type = 0x04; static const uint32_t DW_TAG_formal_parameter = 0x05; static const uint32_t DW_TAG_imported_declaration = 0x08; static const uint32_t DW_TAG_label = 0x0a; static const uint32_t DW_TAG_lexical_block = 0x0b; static const uint32_t DW_TAG_member = 0x0d; static const uint32_t DW_TAG_pointer_type = 0x0f; static const uint32_t DW_TAG_reference_type = 0x10; static const uint32_t DW_TAG_compile_unit = 0x11; static const uint32_t DW_TAG_string_type = 0x12; static const uint32_t DW_TAG_structure_type = 0x13; static const uint32_t DW_TAG_subroutine_type = 0x15; static const uint32_t DW_TAG_typedef = 0x16; static const uint32_t DW_TAG_union_type = 0x17; static const uint32_t DW_TAG_unspecified_parameters = 0x18; static const uint32_t DW_TAG_variant = 0x19; static const uint32_t DW_TAG_common_block = 0x1a; static const uint32_t DW_TAG_common_inclusion = 0x1b; static const uint32_t DW_TAG_inheritance = 0x1c; static const uint32_t DW_TAG_inlined_subroutine = 0x1d; static const uint32_t DW_TAG_module = 0x1e; static const uint32_t DW_TAG_ptr_to_member_type = 0x1f; static const uint32_t DW_TAG_set_type = 0x20; static const uint32_t DW_TAG_subrange_type = 0x21; static const uint32_t DW_TAG_with_stmt = 0x22; static const uint32_t DW_TAG_access_declaration = 0x23; static const uint32_t DW_TAG_base_type = 0x24; static const uint32_t DW_TAG_catch_block = 0x25; static const uint32_t DW_TAG_const_type = 0x26; static const uint32_t DW_TAG_constant = 0x27; static const uint32_t DW_TAG_enumerator = 0x28; static const uint32_t DW_TAG_file_type = 0x29; static const uint32_t DW_TAG_friend = 0x2a; static const uint32_t DW_TAG_namelist = 0x2b; static const uint32_t DW_TAG_namelist_item = 0x2c; static const uint32_t DW_TAG_packed_type = 0x2d; static const uint32_t DW_TAG_subprogram = 0x2e; static const uint32_t DW_TAG_template_type_parameter = 0x2f; static const uint32_t DW_TAG_template_value_parameter = 0x30; static const uint32_t DW_TAG_thrown_type = 0x31; static const uint32_t DW_TAG_try_block = 0x32; static const uint32_t DW_TAG_variant_part = 0x33; static const uint32_t DW_TAG_variable = 0x34; static const uint32_t DW_TAG_volatile_type = 0x35; static const uint32_t DW_TAG_dwarf_procedure = 0x36; static const uint32_t DW_TAG_restrict_type = 0x37; static const uint32_t DW_TAG_interface_type = 0x38; static const uint32_t DW_TAG_namespace = 0x39; static const uint32_t DW_TAG_imported_module = 0x3a; static const uint32_t DW_TAG_unspecified_type = 0x3b; static const uint32_t DW_TAG_partial_unit = 0x3c; static const uint32_t DW_TAG_imported_unit = 0x3d; static const uint32_t DW_TAG_condition = 0x3f; static const uint32_t DW_TAG_shared_type = 0x40; static const uint32_t DW_TAG_type_unit = 0x41; static const uint32_t DW_TAG_rvalue_reference_type = 0x42; static const uint32_t DW_TAG_template_alias = 0x43; static const uint32_t DW_TAG_lo_user = 0x4080; static const uint32_t DW_TAG_hi_user = 0xffff;
  static const uint32_t DW_FORM_addr = 0x01; static const uint32_t DW_FORM_block2 = 0x03; static const uint32_t DW_FORM_block4 = 0x04; static const uint32_t DW_FORM_data2 = 0x05; static const uint32_t DW_FORM_data4 = 0x06; static const uint32_t DW_FORM_data8 = 0x07; static const uint32_t DW_FORM_string = 0x08; static const uint32_t DW_FORM_block = 0x09; static const uint32_t DW_FORM_block1 = 0x0a; static const uint32_t DW_FORM_data1 = 0x0b; static const uint32_t DW_FORM_flag = 0x0c; static const uint32_t DW_FORM_sdata = 0x0d; static const uint32_t DW_FORM_strp = 0x0e; static const uint32_t DW_FORM_udata = 0x0f; static const uint32_t DW_FORM_ref_addr = 0x10; static const uint32_t DW_FORM_ref1 = 0x11; static const uint32_t DW_FORM_ref2 = 0x12; static const uint32_t DW_FORM_ref4 = 0x13; static const uint32_t DW_FORM_ref8 = 0x14; static const uint32_t DW_FORM_ref_udata = 0x15; static const uint32_t DW_FORM_indirect = 0x16; static const uint32_t DW_FORM_sec_offset = 0x17; static const uint32_t DW_FORM_exprloc = 0x18; static const uint32_t DW_FORM_flag_present = 0x19; static const uint32_t DW_FORM_ref_sig8 = 0x20;







const char *dw_get_tag_string(uint32_t value) {
  if (0) {} else if (0x01 == value) { return "DW_TAG_array_type"; } else if (0x02 == value) { return "DW_TAG_class_type"; } else if (0x03 == value) { return "DW_TAG_entry_point"; } else if (0x04 == value) { return "DW_TAG_enumeration_type"; } else if (0x05 == value) { return "DW_TAG_formal_parameter"; } else if (0x08 == value) { return "DW_TAG_imported_declaration"; } else if (0x0a == value) { return "DW_TAG_label"; } else if (0x0b == value) { return "DW_TAG_lexical_block"; } else if (0x0d == value) { return "DW_TAG_member"; } else if (0x0f == value) { return "DW_TAG_pointer_type"; } else if (0x10 == value) { return "DW_TAG_reference_type"; } else if (0x11 == value) { return "DW_TAG_compile_unit"; } else if (0x12 == value) { return "DW_TAG_string_type"; } else if (0x13 == value) { return "DW_TAG_structure_type"; } else if (0x15 == value) { return "DW_TAG_subroutine_type"; } else if (0x16 == value) { return "DW_TAG_typedef"; } else if (0x17 == value) { return "DW_TAG_union_type"; } else if (0x18 == value) { return "DW_TAG_unspecified_parameters"; } else if (0x19 == value) { return "DW_TAG_variant"; } else if (0x1a == value) { return "DW_TAG_common_block"; } else if (0x1b == value) { return "DW_TAG_common_inclusion"; } else if (0x1c == value) { return "DW_TAG_inheritance"; } else if (0x1d == value) { return "DW_TAG_inlined_subroutine"; } else if (0x1e == value) { return "DW_TAG_module"; } else if (0x1f == value) { return "DW_TAG_ptr_to_member_type"; } else if (0x20 == value) { return "DW_TAG_set_type"; } else if (0x21 == value) { return "DW_TAG_subrange_type"; } else if (0x22 == value) { return "DW_TAG_with_stmt"; } else if (0x23 == value) { return "DW_TAG_access_declaration"; } else if (0x24 == value) { return "DW_TAG_base_type"; } else if (0x25 == value) { return "DW_TAG_catch_block"; } else if (0x26 == value) { return "DW_TAG_const_type"; } else if (0x27 == value) { return "DW_TAG_constant"; } else if (0x28 == value) { return "DW_TAG_enumerator"; } else if (0x29 == value) { return "DW_TAG_file_type"; } else if (0x2a == value) { return "DW_TAG_friend"; } else if (0x2b == value) { return "DW_TAG_namelist"; } else if (0x2c == value) { return "DW_TAG_namelist_item"; } else if (0x2d == value) { return "DW_TAG_packed_type"; } else if (0x2e == value) { return "DW_TAG_subprogram"; } else if (0x2f == value) { return "DW_TAG_template_type_parameter"; } else if (0x30 == value) { return "DW_TAG_template_value_parameter"; } else if (0x31 == value) { return "DW_TAG_thrown_type"; } else if (0x32 == value) { return "DW_TAG_try_block"; } else if (0x33 == value) { return "DW_TAG_variant_part"; } else if (0x34 == value) { return "DW_TAG_variable"; } else if (0x35 == value) { return "DW_TAG_volatile_type"; } else if (0x36 == value) { return "DW_TAG_dwarf_procedure"; } else if (0x37 == value) { return "DW_TAG_restrict_type"; } else if (0x38 == value) { return "DW_TAG_interface_type"; } else if (0x39 == value) { return "DW_TAG_namespace"; } else if (0x3a == value) { return "DW_TAG_imported_module"; } else if (0x3b == value) { return "DW_TAG_unspecified_type"; } else if (0x3c == value) { return "DW_TAG_partial_unit"; } else if (0x3d == value) { return "DW_TAG_imported_unit"; } else if (0x3f == value) { return "DW_TAG_condition"; } else if (0x40 == value) { return "DW_TAG_shared_type"; } else if (0x41 == value) { return "DW_TAG_type_unit"; } else if (0x42 == value) { return "DW_TAG_rvalue_reference_type"; } else if (0x43 == value) { return "DW_TAG_template_alias"; } else if (0x4080 == value) { return "DW_TAG_lo_user"; } else if (0xffff == value) { return "DW_TAG_hi_user"; }
  else { return "INVALID!!!"; }
}

const char *dw_get_attrib_string(uint32_t value) {
  if (0) {} else if (0x01 == value) { return "DW_AT_sibling"; } else if (0x02 == value) { return "DW_AT_location"; } else if (0x03 == value) { return "DW_AT_name"; } else if (0x09 == value) { return "DW_AT_ordering"; } else if (0x0b == value) { return "DW_AT_byte_size"; } else if (0x0c == value) { return "DW_AT_bit_offset"; } else if (0x0d == value) { return "DW_AT_bit_size"; } else if (0x10 == value) { return "DW_AT_stmt_list"; } else if (0x11 == value) { return "DW_AT_low_pc"; } else if (0x12 == value) { return "DW_AT_high_pc"; } else if (0x13 == value) { return "DW_AT_language"; } else if (0x15 == value) { return "DW_AT_discr"; } else if (0x16 == value) { return "DW_AT_discr_value"; } else if (0x17 == value) { return "DW_AT_visibility"; } else if (0x18 == value) { return "DW_AT_import"; } else if (0x19 == value) { return "DW_AT_string_length"; } else if (0x1a == value) { return "DW_AT_common_reference"; } else if (0x1b == value) { return "DW_AT_comp_dir"; } else if (0x1c == value) { return "DW_AT_const_value"; } else if (0x1d == value) { return "DW_AT_containing_type"; } else if (0x1e == value) { return "DW_AT_default_value"; } else if (0x20 == value) { return "DW_AT_inline"; } else if (0x21 == value) { return "DW_AT_is_optional"; } else if (0x22 == value) { return "DW_AT_lower_bound"; } else if (0x25 == value) { return "DW_AT_producer"; } else if (0x27 == value) { return "DW_AT_prototyped"; } else if (0x2a == value) { return "DW_AT_return_addr"; } else if (0x2c == value) { return "DW_AT_start_scope"; } else if (0x2e == value) { return "DW_AT_bit_stride"; } else if (0x2f == value) { return "DW_AT_upper_bound"; } else if (0x31 == value) { return "DW_AT_abstract_origin"; } else if (0x32 == value) { return "DW_AT_accessibility"; } else if (0x33 == value) { return "DW_AT_address_class"; } else if (0x34 == value) { return "DW_AT_artificial"; } else if (0x35 == value) { return "DW_AT_base_types"; } else if (0x36 == value) { return "DW_AT_calling_convention"; } else if (0x37 == value) { return "DW_AT_count"; } else if (0x38 == value) { return "DW_AT_data_member_location"; } else if (0x39 == value) { return "DW_AT_decl_column"; } else if (0x3a == value) { return "DW_AT_decl_file"; } else if (0x3b == value) { return "DW_AT_decl_line"; } else if (0x3c == value) { return "DW_AT_declaration"; } else if (0x3d == value) { return "DW_AT_discr_list"; } else if (0x3e == value) { return "DW_AT_encoding"; } else if (0x3f == value) { return "DW_AT_external"; } else if (0x40 == value) { return "DW_AT_frame_base"; } else if (0x41 == value) { return "DW_AT_friend"; } else if (0x42 == value) { return "DW_AT_identifier_case"; } else if (0x43 == value) { return "DW_AT_macro_info"; } else if (0x44 == value) { return "DW_AT_namelist_item"; } else if (0x45 == value) { return "DW_AT_priority"; } else if (0x46 == value) { return "DW_AT_segment"; } else if (0x47 == value) { return "DW_AT_specification"; } else if (0x48 == value) { return "DW_AT_static_link"; } else if (0x49 == value) { return "DW_AT_type"; } else if (0x4a == value) { return "DW_AT_use_location"; } else if (0x4b == value) { return "DW_AT_variable_parameter"; } else if (0x4c == value) { return "DW_AT_virtuality"; } else if (0x4d == value) { return "DW_AT_vtable_elem_location"; } else if (0x4e == value) { return "DW_AT_allocated"; } else if (0x4f == value) { return "DW_AT_associated"; } else if (0x50 == value) { return "DW_AT_data_location"; } else if (0x51 == value) { return "DW_AT_byte_stride"; } else if (0x52 == value) { return "DW_AT_entry_pc"; } else if (0x53 == value) { return "DW_AT_use_UTF8"; } else if (0x54 == value) { return "DW_AT_extension"; } else if (0x55 == value) { return "DW_AT_ranges"; } else if (0x56 == value) { return "DW_AT_trampoline"; } else if (0x57 == value) { return "DW_AT_call_column"; } else if (0x58 == value) { return "DW_AT_call_file"; } else if (0x59 == value) { return "DW_AT_call_line"; } else if (0x5a == value) { return "DW_AT_description"; } else if (0x5b == value) { return "DW_AT_binary_scale"; } else if (0x5c == value) { return "DW_AT_decimal_scale"; } else if (0x5d == value) { return "DW_AT_small"; } else if (0x5e == value) { return "DW_AT_decimal_sign"; } else if (0x5f == value) { return "DW_AT_digit_count"; } else if (0x60 == value) { return "DW_AT_picture_string"; } else if (0x61 == value) { return "DW_AT_mutable"; } else if (0x62 == value) { return "DW_AT_threads_scaled"; } else if (0x63 == value) { return "DW_AT_explicit"; } else if (0x64 == value) { return "DW_AT_object_pointer"; } else if (0x65 == value) { return "DW_AT_endianity"; } else if (0x66 == value) { return "DW_AT_elemental"; } else if (0x67 == value) { return "DW_AT_pure"; } else if (0x68 == value) { return "DW_AT_recursive"; } else if (0x69 == value) { return "DW_AT_signature"; } else if (0x6a == value) { return "DW_AT_main_subprogram"; } else if (0x6b == value) { return "DW_AT_data_bit_offset"; } else if (0x6c == value) { return "DW_AT_const_expr"; } else if (0x6d == value) { return "DW_AT_enum_class"; } else if (0x6e == value) { return "DW_AT_linkage_name"; } else if (0x2000 == value) { return "DW_AT_lo_user"; } else if (0x3fff == value) { return "DW_AT_hi_user"; }
  else { return "INVALID!!!"; }
}

const char *dw_get_form_string(uint32_t value) {
  if (0) {} else if (0x01 == value) { return "DW_FORM_addr"; } else if (0x03 == value) { return "DW_FORM_block2"; } else if (0x04 == value) { return "DW_FORM_block4"; } else if (0x05 == value) { return "DW_FORM_data2"; } else if (0x06 == value) { return "DW_FORM_data4"; } else if (0x07 == value) { return "DW_FORM_data8"; } else if (0x08 == value) { return "DW_FORM_string"; } else if (0x09 == value) { return "DW_FORM_block"; } else if (0x0a == value) { return "DW_FORM_block1"; } else if (0x0b == value) { return "DW_FORM_data1"; } else if (0x0c == value) { return "DW_FORM_flag"; } else if (0x0d == value) { return "DW_FORM_sdata"; } else if (0x0e == value) { return "DW_FORM_strp"; } else if (0x0f == value) { return "DW_FORM_udata"; } else if (0x10 == value) { return "DW_FORM_ref_addr"; } else if (0x11 == value) { return "DW_FORM_ref1"; } else if (0x12 == value) { return "DW_FORM_ref2"; } else if (0x13 == value) { return "DW_FORM_ref4"; } else if (0x14 == value) { return "DW_FORM_ref8"; } else if (0x15 == value) { return "DW_FORM_ref_udata"; } else if (0x16 == value) { return "DW_FORM_indirect"; } else if (0x17 == value) { return "DW_FORM_sec_offset"; } else if (0x18 == value) { return "DW_FORM_exprloc"; } else if (0x19 == value) { return "DW_FORM_flag_present"; } else if (0x20 == value) { return "DW_FORM_ref_sig8"; }
  else { return "INVALID!!!"; }
}
# 124 "./libdb.h" 2

static const char* libdb_SIGNAL_NAME_LIST[] = {
  "NULL SIGNAL",
  "SIGHUP",
  "SIGINT",
  "SIGQUIT",
  "SIGILL",
  "SIGTRAP",
  "SIGARBRT",
  "SIGBUS",
  "SIGFPE",
  "SIGKILL",
  "SIGUSR1",
  "SIGSEGV",
  "SIGUSR2",
  "SIGPIPE",
  "SIGALRM",
  "SIGTERM",
  "UNUSED",
  "SIGCHILD",
  "SIGCONT",
  "SIGSTOP",
  "SIGSTP",
  "SIGTTIN",
  "SIGTTOU",
  "SIGURG",
  "SIGXCPU",
  "SIGXFSZ",
  "SIGVTALRM",
  "SIGPROF",
  "SIGWINCH",
  "SIGIO",
  "SIGPWR",
  "SIGSYS",
};

uint64_t libdb_get_rip(libdb_Program *program) {
  uint64_t result = ptrace(PTRACE_PEEKUSER, program->pid, 16 * 8, 0);
  return result;
}

uint64_t libdb_get_instruction(libdb_Program *program, uint64_t address) {
  uint64_t result = ptrace(PTRACE_PEEKTEXT, program->pid, address);
  return result;

}

int libdb_execution_continue(libdb_Program *program) {
  ((program->state != libdb_Program_State_RUNNING) ? (void) (0) : __assert_fail ("program->state != libdb_Program_State_RUNNING", "./libdb.h", 172, __PRETTY_FUNCTION__));

  if (program->breakpoint_id != -1) {
    libdb_Breakpoint *bp = &_breakpoints[program->breakpoint_id];
    ((program->rip == bp->instruction_address) ? (void) (0) : __assert_fail ("program->rip == bp->instruction_address", "./libdb.h", 176, __PRETTY_FUNCTION__));

    ptrace(PTRACE_POKETEXT, program->pid,
      bp->instruction_address, bp->replaced_memory);
    uint64_t new_instruction = 0;
    new_instruction = ptrace(PTRACE_PEEKTEXT, program->pid, program->rip);
    ((new_instruction == bp->replaced_memory) ? (void) (0) : __assert_fail ("new_instruction == bp->replaced_memory", "./libdb.h", 182, __PRETTY_FUNCTION__));

    ptrace(PTRACE_POKEUSER, program->pid, 16 * 8, bp->instruction_address);
    program->rip = ptrace(PTRACE_PEEKUSER, program->pid, 16 * 8);
    ((program->rip == bp->instruction_address) ? (void) (0) : __assert_fail ("program->rip == bp->instruction_address", "./libdb.h", 186, __PRETTY_FUNCTION__));
    printf("the new instruction to execute is 0x%lX", program->rip); printf("\n");

    int process_status = 0;
    ptrace(PTRACE_SINGLESTEP, program->pid, ((void*)0), ((void*)0));
    waitpid(program->pid, &process_status, 0);
    if (((((__extension__ (((union { __typeof(process_status) __in; int __i; }) { .__in = (process_status) }).__i))) & 0xff) == 0x7f)) {
      int stopSignalNumber = ((((__extension__ (((union { __typeof(process_status) __in; int __i; }) { .__in = (process_status) }).__i))) & 0xff00) >> 8);
      if (stopSignalNumber == 5) {
        program->rip = ptrace(PTRACE_PEEKUSER, program->pid, 16 * 8);
        printf("new rip is 0x%lX", program->rip); printf("\n");
        uint64_t new_data = (0xFFFFFFFFFFFFFF00 & bp->replaced_memory) | 0xCC;
        ptrace(PTRACE_POKETEXT, program->pid, bp->instruction_address, new_data);
        printf("we sucuessfuly single steped and restored the breakpoint"); printf("\n");
      } else {
        printf("the Process stoped after single step but it was not a trap signal!\n"); printf("\n");
        ((0) ? (void) (0) : __assert_fail ("0", "./libdb.h", 202, __PRETTY_FUNCTION__));
      }
    } else {
      printf("The process did not stop after single step!"); printf("\n");
      ((0) ? (void) (0) : __assert_fail ("0", "./libdb.h", 206, __PRETTY_FUNCTION__));
    }
  }

  int process_status = 0;
  ((program->pid > 0) ? (void) (0) : __assert_fail ("program->pid > 0", "./libdb.h", 211, __PRETTY_FUNCTION__));
  ptrace(PTRACE_CONT, program->pid, ((void*)0), ((void*)0));

  if (program-> breakpoint_id != -1) {
    printf("continued exectuion from breakpoint %ld, " "now executing instruction 0x%lX", program->breakpoint_id, program->rip); printf("\n");


  } else if (program->rip != 0) {
    printf("continued exectuion from instruction 0x%lX", program->rip); printf("\n");
  } else {
    printf("started execution!"); printf("\n");
  }

  program->state = libdb_Program_State_RUNNING;
  program->stop_reason = libdb_Stop_Reason_NONE;
  program->breakpoint_id = -1;
  program->rip = 0;
  return 1;
}


void libdb_exectuion_step_over(libdb_Program *program) {

}

void libdb_execution_step_into(libdb_Program *program) {

}

void libdb_exeuction_step_out(libdb_Program *program) {

}

int64_t libdb_breakpoint_create_at_symbol(const char *symbolName, libdb_Program *program)
{



  ((program->state = libdb_Program_State_STOPPED) ? (void) (0) : __assert_fail ("program->state = libdb_Program_State_STOPPED", "./libdb.h", 249, __PRETTY_FUNCTION__));

  libdb_Symbol_Table *symTable = &program->symbol_table;
  const char *currentFunctionName = symTable->functionNames;
  for (uint32_t i = 0; i < symTable->functionCount; i++) {

    if (strcmp(currentFunctionName, symbolName) == 0) {
      libdb_Breakpoint *breakpoint = &_breakpoints[_breakpoint_count];
      breakpoint->instruction_address = symTable->functionAddresses[i];

      breakpoint->replaced_memory = ptrace(PTRACE_PEEKTEXT, program->pid,
       breakpoint->instruction_address, ((void*)0));
      ptrace(PTRACE_POKETEXT, program->pid, breakpoint->instruction_address, 0xCC);

      printf("breakpoint-create: function %s 0x%lX", symbolName, breakpoint->instruction_address); printf("\n");

      int64_t breakpointID = _breakpoint_count;
      _breakpoint_count++;
      return breakpointID;
    }

    currentFunctionName += strlen(currentFunctionName) + 1;
  }

  printf("breakpoint_create: failed to create breakpoint " "could not resolve symbol %s", symbolName); printf("\n");

  return 0;
}

int libdb_program_update_state(libdb_Program *program) {
  int childStatus = 0;
  int child_state_has_changed = waitpid(program->pid, &childStatus, 1);

  if (child_state_has_changed) {
    if (childStatus == -1) {
      printf("error on waitpid for childProcess"); printf("\n");
    } else if (childStatus != -1) {

      if (((((__extension__ (((union { __typeof(childStatus) __in; int __i; }) { .__in = (childStatus) }).__i))) & 0x7f) == 0)) {
          int exitStatus = ((((__extension__ (((union { __typeof(childStatus) __in; int __i; }) { .__in = (childStatus) }).__i))) & 0xff00) >> 8);
          printf("the child terminated normaly with return code %d", exitStatus); printf("\n");
          kill(program->pid, 9);
          program->pid = 0;
          program->state = libdb_Program_State_EXITED;
          program->stop_reason = libdb_Stop_Reason_NONE;
        } else if ((((signed char) ((((__extension__ (((union { __typeof(childStatus) __in; int __i; }) { .__in = (childStatus) }).__i))) & 0x7f) + 1) >> 1) > 0)) {
          int signalNumber = (((__extension__ (((union { __typeof(childStatus) __in; int __i; }) { .__in = (childStatus) }).__i))) & 0x7f);
          printf("the child recived signal %d", signalNumber); printf("\n");
        }

        else if (((((__extension__ (((union { __typeof(childStatus) __in; int __i; }) { .__in = (childStatus) }).__i))) & 0xff) == 0x7f)) {
          int stopSignalNumber = ((((__extension__ (((union { __typeof(childStatus) __in; int __i; }) { .__in = (childStatus) }).__i))) & 0xff00) >> 8);
          if (stopSignalNumber == 5) {
            printf("debug program recieved SIGTRAP"); printf("\n");
            ((_breakpoint_count > 0) ? (void) (0) : __assert_fail ("_breakpoint_count > 0", "./libdb.h", 303, __PRETTY_FUNCTION__));

            program->state = libdb_Program_State_STOPPED;
            program->stop_reason = libdb_Stop_Reason_BREAKPOINT_HIT;
            program->breakpoint_id = -1;
            program->rip = ptrace(PTRACE_PEEKUSER, program->pid, 8 * 16, ((void*)0));
            program->rip -= 1;


            for (uint32_t i = 0; i < _breakpoint_count; i++) {
              libdb_Breakpoint* bp = &_breakpoints[i];
              if (bp->instruction_address == program->rip) {
                printf("breakpoint-hit: index %d, rip 0x%lX", i, program->rip); printf("\n");
                program->breakpoint_id = i;
              }
            }

            if (program->breakpoint_id == -1) {
              ((0) ? (void) (0) : __assert_fail ("0", "./libdb.h", 321, __PRETTY_FUNCTION__));
            }
          }
        } else {
          printf("UNHANLDED STOP SIGNAL"); printf("\n");
        }

      }
    return 1;
  }
  return 0;
}

size_t leb128_decode_uint64(uint8_t *input, uint64_t *result) {
  size_t bytes_consumed = 0;
  *result = 0;
  while (1) {
    *result |= ((input[bytes_consumed] & 0x7F) << (7 * bytes_consumed));
    bytes_consumed++;
    if (!(input[bytes_consumed] & 0x80)) break;
  }
  return bytes_consumed;
}


int strings_match(const char *a, const char *b) {
  size_t index = 0;
  while (a[index] == b[index]) {
    if (a[index] == 0 || b[index] == 0) return 1;
    index++;
  }
  if (a[index] == 0 || b[index] == 0) return 1;
  return 0;
}

uint64_t dw_get_form_size(uint64_t form) {
  switch (form) {
    case DW_FORM_flag_present:
    case DW_FORM_ref1:
    case DW_FORM_data1:
    case DW_FORM_flag: {
      return 1;
    } break;

    case DW_FORM_ref2:
    case DW_FORM_data2: {
      return 2;
    } break;

    case DW_FORM_ref_addr:
    case DW_FORM_ref4:
    case DW_FORM_strp:
    case DW_FORM_data4:
    case DW_FORM_sec_offset: {
      return 4;
    } break;

    case DW_FORM_ref8:
    case DW_FORM_data8:
    case DW_FORM_addr: {
      return 8;
    } break;

    case DW_FORM_exprloc: {
      uint64_t length = 0;
    } break;


    default: {
      printf("Unhandled form: 0x%lX", form); printf("\n");
      ((0) ? (void) (0) : __assert_fail ("0", "./libdb.h", 391, __PRETTY_FUNCTION__));
    }
  }
  ((0) ? (void) (0) : __assert_fail ("0", "./libdb.h", 394, __PRETTY_FUNCTION__));
  return 0;
}


int libdb_program_open(const char* path, libdb_Program *program) {
  FILE *file_handle = fopen(path, "rb");
  if (file_handle == ((void*)0)) {
    printf("Could not find exectuable file %s " "when attempting to open program", path); printf("\n");

  }

  fseek(file_handle, 0, 2);
  size_t file_size = ftell(file_handle);
  fseek(file_handle, 0, 0);
  uint8_t *fileData = (uint8_t *)malloc(file_size);
  fread(fileData, 1, file_size, file_handle);
  fclose(file_handle);

  ELF64Header* header = (ELF64Header*)fileData;
  if (header->magicNumber != (('F' << 24) | ('L' << 16) | ('E' << 8) | 0x7F)) {
    printf("executable file \"%s\" is not a valid ELF binary", path); printf("\n");
  }

  ELFSectionHeader *sectionStringTableSectionHeader = (ELFSectionHeader*)(fileData +
      header->sectionHeaderOffset + ((header->sectionStringTableSectionIndex)
        * header->sectionHeaderEntrySize));
  char *sectionStringTableData = (char *)(fileData +
      (sectionStringTableSectionHeader->fileOffsetOfSectionData));
  ((*sectionStringTableData == 0) ? (void) (0) : __assert_fail ("*sectionStringTableData == 0", "./libdb.h", 423, __PRETTY_FUNCTION__));

  ELFSectionHeader* symbolTableHeader = ((void*)0);
  ELFSectionHeader* stringTableHeader = ((void*)0);
  char* symbolStringTableData = ((void*)0);
  uint32_t symbolTableEntryCount = 0;

  ELFSectionHeader *debug_abbrev_section = 0;
  ELFSectionHeader *debug_info_section = 0;
  ELFSectionHeader *debug_str_section = 0;

  for (uint32_t i = 0; i < header->sectionHeaderEntryCount; i++) {
    ELFSectionHeader *sectionHeader = (ELFSectionHeader*)(fileData +
      header->sectionHeaderOffset + ((i+1) * header->sectionHeaderEntrySize));

    const char *sectionName = sectionStringTableData + sectionHeader->nameOffset;
    if (sectionHeader->sectionType == 3) {
      if (strcmp(sectionName, ".strtab") == 0) {
        stringTableHeader = sectionHeader;
        symbolStringTableData = (char*)(sectionHeader->fileOffsetOfSectionData + fileData);
      }
    } else if (sectionHeader->sectionType == 2) {
      symbolTableHeader = sectionHeader;
      symbolTableEntryCount = symbolTableHeader->sectionSize /
        symbolTableHeader->sectionEntrySize;
    }

    else if (strings_match(sectionName, ".debug_")) {
      const char *debug_section_name = sectionName + (sizeof(".debug_")-1);
      if (strcmp(debug_section_name, "abbrev") == 0) {
        debug_abbrev_section = sectionHeader;
      } else if (strcmp(debug_section_name, "info") == 0) {
        debug_info_section = sectionHeader;
      } else if (strcmp(debug_section_name, "str") == 0) {
        debug_str_section = sectionHeader;
      }
    }
  }

  ((debug_info_section != 0) ? (void) (0) : __assert_fail ("debug_info_section != 0", "./libdb.h", 462, __PRETTY_FUNCTION__));
  ((debug_abbrev_section != 0) ? (void) (0) : __assert_fail ("debug_abbrev_section != 0", "./libdb.h", 463, __PRETTY_FUNCTION__));
  ((debug_str_section != 0) ? (void) (0) : __assert_fail ("debug_str_section != 0", "./libdb.h", 464, __PRETTY_FUNCTION__));

  typedef struct {
    uint32_t producerNameOffset;
    uint16_t languageIDOffset;
    uint32_t unitNameOffset;
  } DWCompUnitAbbrev;

  typedef struct {
    uint32_t name_offset;
    uint32_t type_id;
    uint8_t decl_file;
    uint8_t decl_line;
  } DWVariableAbbrev;

  typedef struct {
    union {
      DWCompUnitAbbrev compUnitAbbrev;
      DWVariableAbbrev variableAbbrev;
    };
  } DWAbbrevEntry;




  DWAbbrevEntry abbrev_entries[64];
  uint32_t abbrev_entry_count = 0;

  {
    printf("reading .debug_abbrev section"); printf("\n");

    uint8_t *dwarf_data =
      (uint8_t *)(debug_abbrev_section->fileOffsetOfSectionData + fileData);
    uint64_t dwarf_index = 0;

    while (dwarf_index < debug_abbrev_section->sectionSize) {
      ((abbrev_entry_count + 1 < 64) ? (void) (0) : __assert_fail ("abbrev_entry_count + 1 < 64", "./libdb.h", 500, __PRETTY_FUNCTION__));

      uint64_t dw_abbrev_code = 0, dw_tag = 0;
      dwarf_index += leb128_decode_uint64(&dwarf_data[dwarf_index], &dw_abbrev_code);
      dwarf_index += leb128_decode_uint64(&dwarf_data[dwarf_index], &dw_tag);
      uint8_t dw_has_children = dwarf_data[dwarf_index];
      dwarf_index++;

      if (dw_tag == 0 && dw_has_children == 0) break;
      ((dw_has_children == 0 || dw_has_children == 1) ? (void) (0) : __assert_fail ("dw_has_children == 0 || dw_has_children == 1", "./libdb.h", 509, __PRETTY_FUNCTION__));

      printf("dwarf tag: %s, has_children: %s", dw_get_tag_string(dw_tag), dw_has_children ? "true" : "false"); printf("\n");


      uint64_t totalOffset = 0;
      while (1) {
        uint64_t dw_attrib = 0, dw_form = 0;
        dwarf_index += leb128_decode_uint64(
          &dwarf_data[dwarf_index], &dw_attrib);
        dwarf_index += leb128_decode_uint64(
          &dwarf_data[dwarf_index], &dw_form);

        if (dw_tag == DW_TAG_compile_unit &&
            dw_attrib == DW_AT_name) {
          compUnitAbbrev.unitNameOffset = totalOffset;
          printf("name offset is %u\n", compUnitAbbrev.unitNameOffset);
        } else if (dw_tag == DW_TAG_compile_unit &&
            dw_attrib == DW_AT_producer) {
          compUnitAbbrev.producerNameOffset = totalOffset;
        }


        if (dw_attrib == 0 && dw_form == 0) break;
        totalOffset += dw_get_form_size(dw_form);
        printf("> dw_attrib: %s, dw_form: %s", dw_get_attrib_string(dw_attrib), dw_get_form_string(dw_form)); printf("\n");

      }

      printf(" "); printf("\n");
      abbrev_entry_count++;
    }
  }

  {

    struct CompilationUnitHeader64 {
      uint32_t unit_length;
      uint16_t version;
      uint32_t debug_abbrev_offset;
      uint8_t address_size;
    } __attribute__((packed));

    struct CompilationUnitHeader64* header = (struct CompilationUnitHeader64*)
      (debug_info_section->fileOffsetOfSectionData + fileData);
    printf(""); printf("\n");
    printf("dwarf version: %d", ((int)header->version)); printf("\n");
    printf("dwarf abbrev offset: %u", header->debug_abbrev_offset); printf("\n");
    printf("dwarf unit length: %u", header->unit_length); printf("\n");

    const uint8_t *debugStringData = (debug_str_section->fileOffsetOfSectionData + fileData);
    uint8_t *compunitData = (uint8_t *)(header + 1) + 1;
    ((compUnitAbbrev.unitNameOffset != 0) ? (void) (0) : __assert_fail ("compUnitAbbrev.unitNameOffset != 0", "./libdb.h", 561, __PRETTY_FUNCTION__));

    uint32_t *producerStringOffsetPtr = (uint32_t *)(compunitData + compUnitAbbrev.producerNameOffset);
    uint32_t *nameStringOffsetPtr = (uint32_t *)(compunitData + compUnitAbbrev.unitNameOffset);
    uint16_t *languageIDPtr= (uint16_t *)(compunitData + compUnitAbbrev.languageIDOffset);
    uint32_t producerStringOffset = *producerStringOffsetPtr;
    uint32_t nameStringOffset = *nameStringOffsetPtr;
    uint16_t languageID = *languageIDPtr;

    const char *producerName = debugStringData + producerStringOffset;
    const char *compiationUnitName = debugStringData + nameStringOffset;

    printf(" "); printf("\n");
    printf("Compilation Unit: %s, offset %u", compiationUnitName, nameStringOffset); printf("\n");
    printf("Producer: %s, offset %u", producerName, producerStringOffset); printf("\n");
    printf("LanguageID: %hu, offset %u", languageID, compUnitAbbrev.languageIDOffset); printf("\n");
    printf(" "); printf("\n");
  }

  ((symbolTableHeader != ((void*)0)) ? (void) (0) : __assert_fail ("symbolTableHeader != NULL", "./libdb.h", 580, __PRETTY_FUNCTION__));
  ((stringTableHeader != ((void*)0)) ? (void) (0) : __assert_fail ("stringTableHeader != NULL", "./libdb.h", 581, __PRETTY_FUNCTION__));
  ((symbolTableEntryCount > 1) ? (void) (0) : __assert_fail ("symbolTableEntryCount > 1", "./libdb.h", 582, __PRETTY_FUNCTION__));
  ELFSymbol *symbolTableData =
    (ELFSymbol*)(symbolTableHeader->fileOffsetOfSectionData + fileData);

  uint64_t functionSymbolCount = 0;
  uint64_t functionStringMemoryRequirement = 0;
  uint64_t fileSymbolCount = 0;
  uint64_t fileStringMemoryRequirement = 0;

  for (uint32_t i = 1; i < symbolTableEntryCount; i++) {
    ELFSymbol *symbol = &symbolTableData[i];
    const char *symbolName = symbol->nameOffset + symbolStringTableData;
    uintptr_t symbolAddress = symbol->symbolValue;
    if (symbol->type == 2) {
      functionSymbolCount++;
      functionStringMemoryRequirement += strlen(symbolName) + 1;
    } else if (symbol->type == 4) {
      fileSymbolCount++;
      fileStringMemoryRequirement += strlen(symbolName) + 1;
    }
  }

  size_t requiredSymbolTableMemory = (functionSymbolCount * sizeof(uint64_t)) +
    functionStringMemoryRequirement + fileStringMemoryRequirement;
  uint8_t *symbolTableMemory = (uint8_t *)malloc(requiredSymbolTableMemory);

  libdb_Symbol_Table *symTable = &program->symbol_table;
  symTable->functionNames = (const char *)symbolTableMemory;
  symTable->functionAddresses = (uintptr_t *)(symbolTableMemory +
      functionStringMemoryRequirement);
  symTable->fileNames = (const char *)symTable->functionAddresses + functionSymbolCount;
  symTable->functionCount = functionSymbolCount;
  symTable->fileCount = fileSymbolCount;

  uint32_t currentFunctionIndex = 0;
  uint32_t currentFileIndex = 0;
  char *functionNameWrite = (char *)symTable->functionNames;
  char *fileNameWrite = (char *)symTable->fileNames;
  for (uint32_t i = 1; i < symbolTableEntryCount; i++) {
    ELFSymbol *symbol = &symbolTableData[i];
    const char *symbolName = symbol->nameOffset + symbolStringTableData;
    uintptr_t symbolAddress = symbol->symbolValue;

    if (symbol->type == 2) {
      size_t symbolNameLength = strlen(symbolName);
      memcpy(functionNameWrite, symbolName, symbolNameLength);
      functionNameWrite[symbolNameLength] = 0;
      functionNameWrite += symbolNameLength + 1;
      symTable->functionAddresses[currentFunctionIndex] = symbolAddress;
      currentFunctionIndex++;
    } else if(symbol->type == 4) {
      size_t symbolNameLength = strlen(symbolName);
      memcpy(fileNameWrite, symbolName, symbolNameLength);
      fileNameWrite[symbolNameLength] = 0;
      fileNameWrite += symbolNameLength + 1;
      currentFileIndex++;
    }
  }

  ((currentFunctionIndex == symTable->functionCount) ? (void) (0) : __assert_fail ("currentFunctionIndex == symTable->functionCount", "./libdb.h", 641, __PRETTY_FUNCTION__));
  ((currentFileIndex == symTable->fileCount) ? (void) (0) : __assert_fail ("currentFileIndex == symTable->fileCount", "./libdb.h", 642, __PRETTY_FUNCTION__));

  program->state = libdb_Program_State_STOPPED;
  program->stop_reason = libdb_Stop_Reason_NONE;
  program->breakpoint_id = -1;
  program->rip = 0;

  pid_t pid = fork();
  program->pid = pid;

  if (pid == -1) {
    return 1;
  } else if (pid == 0) {
    char* const args[] = { ((void*)0) };
    char* const envp[] = { ((void*)0) };
    ptrace(PTRACE_TRACEME, ((void*)0), ((void*)0));
    execve("test", args, envp);
    printf("the child process failed to execute\n"); printf("\n");
    return 1;
  } else {
    int childStatus = 0;
    waitpid(pid, &childStatus, 0x40000000);
    if (childStatus == -1) {
      printf("error on waitpid for childProcess"); printf("\n");
    } else {
      ((((((__extension__ (((union { __typeof(childStatus) __in; int __i; }) { .__in = (childStatus) }).__i))) & 0xff) == 0x7f)) ? (void) (0) : __assert_fail ("WIFSTOPPED(childStatus)", "./libdb.h", 667, __PRETTY_FUNCTION__));
      int stopSignalNumber = ((((__extension__ (((union { __typeof(childStatus) __in; int __i; }) { .__in = (childStatus) }).__i))) & 0xff00) >> 8);
      ((stopSignalNumber == 5) ? (void) (0) : __assert_fail ("stopSignalNumber == LIBDB_SIGNAL_TRAP", "./libdb.h", 669, __PRETTY_FUNCTION__));
    }
  }

  printf("childpid is %d", pid); printf("\n");

  return 0;
}
# 8 "test_libdb.c" 2

# 1 "/usr/include/assert.h" 1 3 4
# 67 "/usr/include/assert.h" 3 4
extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));
# 10 "test_libdb.c" 2
# 21 "test_libdb.c"
void PrintSymbolTable(libdb_Symbol_Table *symbolTable)
{
  const char *filename = symbolTable->fileNames;
  for (uint32_t i = 0; i < symbolTable->fileCount; i++) {
    printf("file: %s\n", filename);
    filename += strlen(filename) + 1;
  }

  const char *functionName = symbolTable->functionNames;
  for (uint32_t i = 0; i < symbolTable->functionCount; i++) {
    uintptr_t functionAddress = symbolTable->functionAddresses[i];
    printf("function %s %lX\n", functionName, functionAddress);
    functionName += strlen(functionName) + 1;
  }
}
# 61 "test_libdb.c"
int main() {

  libdb_Program program;
  libdb_program_open(&program, "test");



  libdb_breakpoint_create(&program, "main");
  libdb_execution_continue(&program);

  int isRunning = 1;
  uint64_t counter = 0;
  while (isRunning) {
    if (libdb_program_update_state(&program)) {
      if (program.state == libdb_Program_State_EXITED) {
        return 0;
      }


      switch (program.stop_reason) {
        case libdb_Stop_Reason_BREAKPOINT_HIT : {

          printf("we stopped yo.  contiuning yo \n");
          libdb_execution_continue(&program);
        } break;
      }
    } else {
# 98 "test_libdb.c"
    }
  }

  return 0;
}
